name: Libretro Hook - Build and Release

on:
  push:
    branches:
      - master

env:
  CORE_NAME: hook_libretro

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Setup build environment
      run: |
        sudo apt update
        sudo apt install -y mingw-w64 zip
        mkdir -p dist

    - name: Build Linux x64
      working-directory: main/build
      run: |
        make clean || true
        make linux
        mkdir -p ../../dist/linux-x64/cores
        cp ../generated/unix/hook_libretro.so ../../dist/linux-x64/cores/

    - name: Build Windows x64
      working-directory: main/build
      run: |
        make clean || true
        make windows64
        mkdir -p ../../dist/windows-x64/cores
        cp hook_libretro.dll ../../dist/windows-x64/cores/ || echo "Windows DLL not found, checking alternative paths"
        # Check if the DLL is in the generated directory
        cp ../generated/wincross64/hook_libretro.dll ../../dist/windows-x64/cores/ || true

    - name: Copy system files and documentation
      run: |
        # Copy system files to all platform directories
        for dir in dist/*/; do
          if [ -d "$dir" ]; then
            mkdir -p "${dir}system/hook"
            cp -r main/scripts/* "${dir}system/hook/"
            # Copy info files
            mkdir -p "${dir}info"
            cp main/info/hook_libretro.info "${dir}info/" 2>/dev/null || true
            # Copy documentation files
            cp README.md README.ja.md LICENSE "${dir}" 2>/dev/null || true
          fi
        done

    - name: Create distribution archives
      run: |
        cd dist
        for dir in */; do
          if [ -d "$dir" ]; then
            platform=$(basename "$dir")
            zip -r "${{ env.CORE_NAME }}-${platform}.zip" "$dir"
          fi
        done

    - name: Verify build artifacts
      run: |
        echo "Build verification:"
        ls -la dist/
        echo ""
        echo "Archive contents:"
        for archive in dist/*.zip; do
          if [ -f "$archive" ]; then
            echo "=== $(basename "$archive") ==="
            unzip -l "$archive" | head -10
            echo ""
          fi
        done

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_number }}-${{ github.sha }}
        name: Libretro Hook - Build #${{ github.run_number }}
        body: |
          **Libretro Hook - Release ${{ github.ref_name }}**

          ðŸ“‹ **Build Information:**
          - Commit: `${{ github.sha }}`
          - Branch: `${{ github.ref_name }}`
          - Build Date: `${{ github.event.head_commit.timestamp }}`

          ðŸŽ¯ **Supported Platforms:**
          - Linux x64 (`${{ env.CORE_NAME }}-linux-x64.zip`)
          - Windows x64 (`${{ env.CORE_NAME }}-windows-x64.zip`)

          ðŸ“¦ Each archive contains:
          - Core library (`cores/hook_libretro.so` or `.dll`)
          - Hook scripts (`system/hook/before_load.sh` and `before_load.bat`)
          - Core information file (`info/hook_libretro.info`)
          - Documentation (`README.md`, `README.ja.md`, `LICENSE`)

          ðŸš€ **Installation:**
          1. Extract the archive for your platform
          2. Copy `cores/hook_libretro.*` to your RetroArch cores directory
          3. Copy `system/hook/` directory to your RetroArch system directory
          4. Copy `info/hook_libretro.info` to your RetroArch info directory
          5. The core will be available as "Hook" in RetroArch
        files: dist/${{ env.CORE_NAME }}-*.zip
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

    - name: Cleanup old releases
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Keep only the latest 5 releases to avoid clutter
        echo "Cleaning up old releases (keeping latest 5)..."
        releases=$(gh release list --limit 50 --json tagName,createdAt --jq '.[] | select(.tagName | startswith("build-")) | .tagName' | tail -n +6)

        for tag in $releases; do
          if [ -n "$tag" ] && [ "$tag" != "build-${{ github.run_number }}-${{ github.sha }}" ]; then
            echo "Deleting release: $tag"
            gh release delete "$tag" --yes --cleanup-tag || echo "Failed to delete $tag (might not exist)"
          fi
        done
